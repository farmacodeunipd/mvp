name: Docker Image Release

on:
  pull_request:
    branches:
      - main

jobs:
  test-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Set Git user
        run: |
          git config --global user.name "farmacodeunipd"
          git config --global user.email "farmacode.swe.unipd@gmail.com"

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Fetch Tags
        run: git fetch --tags

      - name: Get Version
        id: versioning
        run: |
          if [[ $(git tag) ]]; then
            LAST_TAG=$(git describe --tags --abbrev=0)
          else
            LAST_TAG="v0.0.0"
            git tag $LAST_TAG
            git push --tags
          fi

          echo "Last Tag: $LAST_TAG"

          IFS='.' read -ra VERSION_PARTS <<< "$LAST_TAG"
          MAJOR="${VERSION_PARTS[0]#v}"
          MID="${VERSION_PARTS[1]}"
          MINOR="${VERSION_PARTS[2]}"

          if git log --format=%B -n 1 $GITHUB_SHA | grep -q "version-major"; then
            echo "Version Major Detected"
            ((MAJOR+=1))
            MID=0
            MINOR=0
          elif git log --format=%B -n 1 $GITHUB_SHA | grep -q "version-mid"; then
            echo "Version Mid Detected"
            ((MID+=1))
            MINOR=0
          elif git log --format=%B -n 1 $GITHUB_SHA | grep -q "version-minor"; then
            echo "Version Minor Detected"
            ((MINOR+=1))
          fi

          echo "creating new version ..."

          UPDATED_VERSION="v${MAJOR}.${MID}.${MINOR}"
          echo "Updated Version: $UPDATED_VERSION"
          echo "::set-output name=updated_version::$UPDATED_VERSION"
          
        env:
          GITHUB_SHA: ${{ github.sha }}

      - name: Log in to GitHub Packages
        run: echo "${{ secrets.PAT }}" | docker login docker.pkg.github.com -u farmacodeunipd --password-stdin

      - name: Set up Docker Compose
        run: docker-compose up -d

      - name: Run tests and stop if they do not pass
        run: |
          ci_env=$(bash <(curl -s https://codecov.io/env))
          docker exec $ci_env mvp_python-api_1 pytest tests/test_algo.py --cov=. --cov-report=xml:/tests/coverage.xml --verbose
          docker exec $ci_env mvp_react-app_1 npm test
          docker exec $ci_env mvp_express_1 npm test
        continue-on-error: false

      - name: Copy coverage reports
        run: |
          docker cp mvp_python-api_1:/tests/coverage.xml ./coverage-python-api.xml
          docker cp mvp_react-app_1:/client/coverage/coverage-final.json ./coverage-react.json
          docker cp mvp_express_1:/express/coverage/coverage-final.json ./coverage-express.json

      - name: Stop and remove Docker containers
        run: docker-compose down

      - name: Upload Python API coverage report to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage-python-api.xml
          flags: python-api
          name: codecov-python-api

      - name: Upload React application coverage report to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage-react.json
          flags: react-app
          name: codecov-react-app

      - name: Upload Express coverage report to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage-express.json
          flags: express
          name: codecov-express

      - name: Push Docker images
        run: |
          docker images
          IMAGES=("mvp_db" "mvp_python-api" "mvp_react-app" "mvp_express")
          for IMAGE in "${IMAGES[@]}"; do
            docker tag $IMAGE docker.pkg.github.com/farmacodeunipd/mvp/$IMAGE:${{ steps.versioning.outputs.updated_version }}
            docker push docker.pkg.github.com/farmacodeunipd/mvp/$IMAGE:${{ steps.versioning.outputs.updated_version }}
            
            docker tag $IMAGE docker.pkg.github.com/farmacodeunipd/mvp/$IMAGE:latest
            docker push docker.pkg.github.com/farmacodeunipd/mvp/$IMAGE:latest
          done
          
      - name: Check if release already exists
        id: check_release
        run: |
          VERSION="${{ steps.versioning.outputs.updated_version }}"
          echo "Checking release for version ${VERSION}"
          response=$(curl -s -o /dev/null -I -w "%{http_code}" https://api.github.com/repos/farmacodeunipd/mvp/releases/tags/${VERSION})
          echo "Response code: $response"
          if [[ $response -eq 200 ]]; then
            echo "Release already exists for version ${VERSION}"
            echo "::set-output name=release_exists::true"
          else
            echo "Release does not exist for version ${VERSION}"
            echo "::set-output name=release_exists::false"
          fi

      - name: Create GitHub Release
        if: steps.check_release.outputs.release_exists != 'true'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.versioning.outputs.updated_version }}
          release_name: Release ${{ steps.versioning.outputs.updated_version }}
          body: |
            Release ${{ steps.versioning.outputs.updated_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}